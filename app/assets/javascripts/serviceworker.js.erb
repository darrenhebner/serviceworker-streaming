const staticCacheName = '14';
const expectedCaches = [
  staticCacheName
];

const filesToCache = [
  '/shell-start',
  '/shell-end',
  '/shell-start-article'
];

self.addEventListener('install', event => {
  self.skipWaiting();

  event.waitUntil(
    caches.open(staticCacheName)
      .then(cache => cache.addAll(filesToCache))
  );
});

// remove caches that aren't in expectedCaches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(keys => Promise.all(
      keys.map(key => {
        if (!expectedCaches.includes(key)) return caches.delete(key);
      })
    ))
  );
});

function createPageStream(request) {
  console.log("makin stream")
  const stream = new ReadableStream({
    start(controller) {
      // the body url is the request url plus 'include'
      const url = new URL(request.url + '?shell=true');

      const startFetch = caches.match('/shell-start');
      const endFetch = caches.match('/shell-end');
      const middleFetch = fetch(url).then(response => {
        return response;
      }).catch(err => caches.match('/offline'));

      function pushStream(stream) {
        const reader = stream.getReader();

        return reader.read().then(function process(result) {
          if (result.done) return;
          controller.enqueue(result.value);
          return reader.read().then(process);
        });
      }

      startFetch
        .then(response => pushStream(response.body))
        .then(() => middleFetch)
        .then(response => pushStream(response.body))
        .then(() => endFetch)
        .then(response => pushStream(response.body))
        .then(() => controller.close());
    }
  });

  return new Response(stream, {
    headers: {'Content-Type': 'text/html; charset=utf-8'}
  });
}

function createArticleStream(request) {
  console.log("makin stream")
  const stream = new ReadableStream({
    start(controller) {
      // the body url is the request url plus 'include'
      const url = new URL(request.url + '?shell=true');

      const startFetch = caches.match('/shell-start-article');
      const endFetch = caches.match('/shell-end');
      const middleFetch = fetch(url).then(response => {
        return response;
      }).catch(err => caches.match('/offline'));

      function pushStream(stream) {
        const reader = stream.getReader();

        return reader.read().then(function process(result) {
          if (result.done) return;
          controller.enqueue(result.value);
          return reader.read().then(process);
        });
      }

      startFetch
        .then(response => pushStream(response.body))
        .then(() => middleFetch)
        .then(response => pushStream(response.body))
        .then(() => endFetch)
        .then(response => pushStream(response.body))
        .then(() => controller.close());
    }
  });

  return new Response(stream, {
    headers: {'Content-Type': 'text/html; charset=utf-8'}
  });
}

self.addEventListener('fetch', event => {
  const url = new URL(event.request.url);

  console.log(url)

  if (url.origin === location.origin) {
    // home or article
    if (url.pathname === '/') {
      event.respondWith(createPageStream(event.request));
      return;
    } else if (/^\/articles\//.test(url.pathname)) {
      event.respondWith(createArticleStream(event.request));
      return;
    }

  }

  //cache-first for the rest
  event.respondWith(
    caches.match(event.request).then(r => r || fetch(event.request))
  );
});
